#!/bin/bash

# Deployment script for Avalanche testnet
# This script deploys all contracts to the Avalanche testnet and updates the contracts.config.ts file

set -e # Exit on error

# Check if .env file exists
if [ ! -f ".env" ]; then
  echo "Error: .env file not found. Please create one with your PRIVATE_KEY."
  exit 1
fi

# Load environment variables
source .env

# Check if PRIVATE_KEY is set
if [ -z "$PRIVATE_KEY" ]; then
  echo "Error: PRIVATE_KEY not set in .env file."
  exit 1
fi

# Avalanche Fuji Testnet RPC URL
AVALANCHE_RPC_URL="https://api.avax-test.network/ext/bc/C/rpc"

echo "Starting deployment to Avalanche Fuji Testnet..."

# Navigate to contracts directory
cd "$(dirname "$0")"

# Build contracts
echo "Building contracts..."
forge build --optimize

# Deploy contracts
echo "Deploying contracts..."
forge script script/Deploy.s.sol:Deploy --rpc-url $AVALANCHE_RPC_URL --private-key $PRIVATE_KEY --broadcast --verify

# Extract contract addresses from the deployment output
DEPLOY_OUTPUT=$(forge script script/Deploy.s.sol:Deploy --rpc-url $AVALANCHE_RPC_URL --private-key $PRIVATE_KEY)

# Extract contract addresses
TRASH_TOKEN_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "TrashToken:" | awk '{print $2}')
TEST_USDC_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "TestUSDC:" | awk '{print $2}')
STAKE_NFT_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "StakeNFT:" | awk '{print $2}')
ACHIEVEMENT_NFT_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "AchievementNFT:" | awk '{print $2}')
EMAIL_VERIFIER_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "EmailVerifier:" | awk '{print $2}')
RECYCLING_SYSTEM_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "RecyclingSystem:" | awk '{print $2}')
QUEST_SYSTEM_ADDRESS=$(echo "$DEPLOY_OUTPUT" | grep "QuestSystem:" | awk '{print $2}')

# Check if contracts.config.ts exists
CONFIG_FILE="../contracts.config.ts"
if [ ! -f "$CONFIG_FILE" ]; then
  # Create new config file
  echo "Creating new contracts.config.ts file..."
  cat > "$CONFIG_FILE" << EOL
// Automatically generated by deploy.sh
// Contract addresses for Avalanche Fuji Testnet

export interface ContractAddresses {
  trashToken: string;
  testUSDC: string;
  stakeNFT: string;
  achievementNFT: string;
  emailVerifier: string;
  recyclingSystem: string;
  questSystem: string;
}

export const contractAddresses: ContractAddresses = {
  trashToken: "${TRASH_TOKEN_ADDRESS}",
  testUSDC: "${TEST_USDC_ADDRESS}",
  stakeNFT: "${STAKE_NFT_ADDRESS}",
  achievementNFT: "${ACHIEVEMENT_NFT_ADDRESS}",
  emailVerifier: "${EMAIL_VERIFIER_ADDRESS}",
  recyclingSystem: "${RECYCLING_SYSTEM_ADDRESS}",
  questSystem: "${QUEST_SYSTEM_ADDRESS}"
};

export const networkConfig = {
  name: "Avalanche Fuji Testnet",
  chainId: 43113,
  rpcUrl: "https://api.avax-test.network/ext/bc/C/rpc",
  blockExplorer: "https://testnet.snowtrace.io"
};
EOL
else
  # Update existing config file
  echo "Updating existing contracts.config.ts file..."
  
  # Only update addresses that are not empty
  if [ ! -z "$TRASH_TOKEN_ADDRESS" ]; then
    sed -i "s/trashToken: \"[^\"]*\"/trashToken: \"$TRASH_TOKEN_ADDRESS\"/" "$CONFIG_FILE"
  fi
  
  if [ ! -z "$TEST_USDC_ADDRESS" ]; then
    sed -i "s/testUSDC: \"[^\"]*\"/testUSDC: \"$TEST_USDC_ADDRESS\"/" "$CONFIG_FILE"
  fi
  
  if [ ! -z "$STAKE_NFT_ADDRESS" ]; then
    sed -i "s/stakeNFT: \"[^\"]*\"/stakeNFT: \"$STAKE_NFT_ADDRESS\"/" "$CONFIG_FILE"
  fi
  
  if [ ! -z "$ACHIEVEMENT_NFT_ADDRESS" ]; then
    sed -i "s/achievementNFT: \"[^\"]*\"/achievementNFT: \"$ACHIEVEMENT_NFT_ADDRESS\"/" "$CONFIG_FILE"
  fi
  
  if [ ! -z "$EMAIL_VERIFIER_ADDRESS" ]; then
    sed -i "s/emailVerifier: \"[^\"]*\"/emailVerifier: \"$EMAIL_VERIFIER_ADDRESS\"/" "$CONFIG_FILE"
  fi
  
  if [ ! -z "$RECYCLING_SYSTEM_ADDRESS" ]; then
    sed -i "s/recyclingSystem: \"[^\"]*\"/recyclingSystem: \"$RECYCLING_SYSTEM_ADDRESS\"/" "$CONFIG_FILE"
  fi
  
  if [ ! -z "$QUEST_SYSTEM_ADDRESS" ]; then
    sed -i "s/questSystem: \"[^\"]*\"/questSystem: \"$QUEST_SYSTEM_ADDRESS\"/" "$CONFIG_FILE"
  fi
fi

echo "Deployment completed successfully!"
echo "Contract addresses have been saved to contracts.config.ts"
